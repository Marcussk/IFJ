S   	-> STMT 
		-> id : TYP
		-> begin
		-> TERMINUS
		-> function id(PARAMS

TERMINUS-> end.
		-> end;

STMT    -> id
		-> TYP
		-> (BRACKET STMT
		-> )
		-> STMT)               
		-> while COND do STMTLIST
		-> id := STMT
		-> A
		-> begin STMTLIST
		-> CALL
		-> STMT STMTLIST
		-> function CALL
		-> LSIDE > STMT
		-> LSIDE < STMT           ?prio operacii?
		-> LSIDE <= STMT
		-> LSIDE >= STMT
		-> LSIDE = STMT
		-> LSIDE <> STMT
		-> LSIDE	

LSIDE	-> OPR + STMT
		-> OPR - STMT
		-> OPR

OPR 	-> MID * OPR
		-> MID / OPR
		-> MID

MID		-> (STMT
		-> id
		-> TYP

CALL    -> id (PARAMS             ?zbytocnost?

BRACKET -> STMT

PARAMS  -> )
		-> PARAM
		-> PARAM , PARAMS		
		-> id(PARAMS               ???vnorene volania?
		-> ): TYP; SUFFIX

SUFFIX  -> forward
		-> epsilon

PARAM   -> id
		-> TYP	

COND    -> STMT	
		-> id
	 	-> int

STMTLIST-> end
		-> STMT
		-> STMT; STMLIST			  

A  		-> IFBLOCK B else A     ?If!
		-> STMT 

IFBLOCK -> if COND then

B		-> A
		-> STMT
		-> epsilon

EQU 	-> <
	 	-> >
		-> <>
		-> >=
		-> <=
		-> =

TYP 	-> int
		-> real
		-> string
		-> bool