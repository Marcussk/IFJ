
/*

void test_stack2(void){
	printf("Test2 stared ..................\n");
	Stack s; 
	iVal new_iVal, next_iVal, iVal_1,  ret_iVal;
	new_iVal.iInt = RANDOM_NUM;
	next_iVal.iInt = REAL_NUM;
	iVal_1.iInt = 42; 

	Stack__init__(&s);

	Stack_push(&s, next_iVal );
	Stack_push(&s, new_iVal );
	Stack_push(&s, next_iVal );
	Stack_push(&s, new_iVal );
	Stack_push(&s, next_iVal );
	Stack_push(&s, next_iVal );

	int_Stack_debug(&s, IND);

	ret_iVal = Stack_pop(&s);
	ret_iVal = Stack_pop(&s);
	ret_iVal = Stack_pop(&s);
	ret_iVal = Stack_pop(&s);
	int_Stack_debug(&s, IND);

	Stack_push(&s, next_iVal );
	Stack_push(&s, next_iVal );

	int_Stack_debug(&s, IND);

	Stack__dell__(&s);
}
*/
/*Test of functionality for array stack*/
/*
void test_stack1(void){
	printf("Test1 stared ..................\n");
	Stack s;
	int i;
	Stack__init__(&s);
	printf("Inicializovany Stack: \n" );
	printf("Velkost stacku: %d \n ", s.prealocated );
	printf("TOP: %d \n ", s.top );
	printf("Vypis poloziek staku:\n ");
	for(i = 0 ;  i < s.prealocated; i++){
		printf("%d.pos -> %d \n ", i,  (s.StackArray[i]).iInt );
	}
	iVal new_iVal, next_iVal, iVal_1;
	new_iVal.iInt = RANDOM_NUM;
	next_iVal.iInt = REAL_NUM;
	iVal_1.iInt = 42; 
	Stack_push(&s, new_iVal );
	Stack_push(&s, new_iVal );
	Stack_push(&s, new_iVal );
	Stack_push(&s, new_iVal );
	Stack_push(&s, next_iVal );
	Stack_push(&s, new_iVal );
	Stack_push(&s, next_iVal );
	Stack_push(&s, new_iVal );
	Stack_push(&s, next_iVal );
	Stack_push(&s, next_iVal );

	printf("Velkost stacku: %d \n ", s.prealocated );
	printf("TOP: %d \n ", s.top );
	printf("Vypis poloziek staku:\n ");
	for(i = 0 ;  i < s.prealocated; i++){
		printf("%d.pos -> %d \n ", i,  (s.StackArray[i]).iInt );
	}
	printf("__________________________________\n ");

	iVal ret_iVal = Stack_pop(&s);
	printf("TOP: %d \n ", s.top );
	for(i = 0 ;  i < s.prealocated; i++){
		printf("%d.pos -> %d \n ", i,  (s.StackArray[i]).iInt );
	}
	printf("__________________________________\n ");

	Stack_push(&s, new_iVal );
	printf("TOP: %d \n ", s.top );
	printf("Vypis poloziek staku:\n ");
	for(i = 0 ;  i < s.prealocated; i++){
		printf("%d.pos -> %d \n ", i,  (s.StackArray[i]).iInt );
	}
	printf("__________________________________\n ");


	Stack__dell__(&s);
	printf("Velkost stacku: %d \n ", s.prealocated );
	printf("TOP: %d \n ", s.top );
	printf("Vypis poloziek staku:\n ");
	for(i = 0 ;  i < s.prealocated; i++){
		printf("%d.pos -> %d \n ", i,  (s.StackArray[i]).iInt );
	}
	printf("__________________________________\n ");

	Stack__init__(&s);
	Stack_push(&s, iVal_1 );
	Stack_push(&s, iVal_1 );
	Stack_push(&s, iVal_1 );
	Stack_push(&s, iVal_1 );

	printf("TOP: %d \n ", s.top );
	printf("Vypis poloziek staku:\n ");
	for(i = 0 ;  i < s.prealocated; i++){
		printf("%d.pos -> %d \n ", i,  (s.StackArray[i]).iInt );
	}
	printf("__________________________________\n ");

	
	iVal *ret_iVal_1;
	(ret_iVal_1) = Stack_getAt( &s, IND );
	printf("Hodnota na indexe %d je %d \n", IND, ret_iVal_1->iInt );
	Stack__dell__(&s);

}	

*/